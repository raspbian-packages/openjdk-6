# HG changeset patch
# User tdv
# Date 1227057387 28800
# Node ID 8eb24fc882427ce5907083866b0d3b7a82ed8659
# Parent  3a9d06af8830c488de1700130c88ee463d06e1a4
6758179: D3D: AlphaComposite is applied incorrectly for uncached opaque BufferedImage
Reviewed-by: campbell, flar

diff -r 3a9d06af8830 -r 8eb24fc88242 src/windows/native/sun/java2d/d3d/D3DBlitLoops.cpp
--- openjdk.orig/jdk/src/windows/native/sun/java2d/d3d/D3DBlitLoops.cpp	Sat Nov 01 20:42:18 2008 +0300
+++ openjdk/jdk/src/windows/native/sun/java2d/d3d/D3DBlitLoops.cpp	Tue Nov 18 17:16:27 2008 -0800
@@ -252,11 +252,15 @@
                                        pSrcInfo, &dstInfo, NULL, NULL);
             break;
         case ST_INT_ARGB_PRE:
-        case ST_INT_RGB:
             AnyIntIsomorphicCopy(pSrcBase, pDstBase,
                                  srcWidth, srcHeight,
                                  pSrcInfo, &dstInfo, NULL, NULL);
             break;
+        case ST_INT_RGB:
+            IntRgbToIntArgbConvert(pSrcBase, pDstBase,
+                                   srcWidth, srcHeight,
+                                   pSrcInfo, &dstInfo, NULL, NULL);
+            break;
         case ST_INT_ARGB_BM:
             // REMIND: we don't have such sw loop
             // so this path is disabled for now on java level
diff -r 3a9d06af8830 -r 8eb24fc88242 test/sun/java2d/DirectX/OpaqueImageToSurfaceBlitTest/OpaqueImageToSurfaceBlitTest.java
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ openjdk/jdk/test/sun/java2d/DirectX/OpaqueImageToSurfaceBlitTest/OpaqueImageToSurfaceBlitTest.java	Tue Nov 18 17:16:27 2008 -0800
@@ -0,0 +1,75 @@
+/*
+ * Copyright 2007-2008 Sun Microsystems, Inc.  All Rights Reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
+ * CA 95054 USA or visit www.sun.com if you need additional information or
+ * have any questions.
+ */
+
+/*
+ * @test
+ * @bug 6764257
+ * @summary Tests that the alpha in opaque images doesn't affect result of alpha
+ * compositing
+ * @author Dmitri.Trembovetski@sun.com: area=Graphics
+ * @run main/othervm OpaqueImageToSurfaceBlitTest
+ * @run main/othervm -Dsun.java2d.noddraw=true OpaqueImageToSurfaceBlitTest
+ * @run main/othervm -Dsun.java2d.opengl=True OpaqueImageToSurfaceBlitTest
+ */
+
+import java.awt.AlphaComposite;
+import java.awt.Graphics2D;
+import java.awt.GraphicsConfiguration;
+import java.awt.GraphicsDevice;
+import java.awt.GraphicsEnvironment;
+import java.awt.image.BufferedImage;
+import java.awt.image.DataBufferInt;
+import java.awt.image.VolatileImage;
+
+public class OpaqueImageToSurfaceBlitTest {
+
+    public static void main(String[] args) {
+
+        GraphicsEnvironment ge =
+            GraphicsEnvironment.getLocalGraphicsEnvironment();
+        GraphicsDevice gd = ge.getDefaultScreenDevice();
+        GraphicsConfiguration gc = gd.getDefaultConfiguration();
+        VolatileImage vi = gc.createCompatibleVolatileImage(16, 16);
+        vi.validate(gc);
+
+        BufferedImage bi =
+            new BufferedImage(2, 2, BufferedImage.TYPE_INT_RGB);
+        int data[] = ((DataBufferInt)bi.getRaster().getDataBuffer()).getData();
+        data[0] = 0x0000007f;
+        data[1] = 0x0000007f;
+        data[2] = 0xff00007f;
+        data[3] = 0xff00007f;
+        Graphics2D g = vi.createGraphics();
+        g.setComposite(AlphaComposite.SrcOver.derive(0.999f));
+        g.drawImage(bi, 0, 0, null);
+
+        bi = vi.getSnapshot();
+        if (bi.getRGB(0, 0) != bi.getRGB(1, 1)) {
+            throw new RuntimeException("Test FAILED: color at 0x0 ="+
+                Integer.toHexString(bi.getRGB(0, 0))+" differs from 1x1 ="+
+                Integer.toHexString(bi.getRGB(1,1)));
+        }
+
+        System.out.println("Test PASSED.");
+    }
+}
